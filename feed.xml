<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-18T14:21:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>GitHub User</name></author><entry><title type="html">linux 명령어</title><link href="http://localhost:4000/cmd/2022/04/18/linux.html" rel="alternate" type="text/html" title="linux 명령어" /><published>2022-04-18T00:00:00+09:00</published><updated>2022-04-18T00:00:00+09:00</updated><id>http://localhost:4000/cmd/2022/04/18/linux</id><content type="html" xml:base="http://localhost:4000/cmd/2022/04/18/linux.html"><![CDATA[<h2 id="linux-명령어">linux 명령어</h2>

<h2 id="1-lslist-segment">1. ls(list segment)</h2>

<ul>
  <li>
    <p>현재 위치의 파일 목록을 조회하는 명령어.</p>
  </li>
  <li>ls -l : 파일들의 상세 정보를 나타냅니다.</li>
  <li>ls -a : 숨어있는 파일들도 표시합니다.</li>
  <li>ls -t : 파일들을 생성된 시간별로(최신부터) 표시합니다.</li>
  <li>ls -rt: 파일들을 오래된 것 부터 표시합니다.</li>
  <li>
    <p>ls -F : 파일을 표시할 때 마지막에 유형을 나타내는 파일명을 끝에 표시합니다.</p>

    <ul>
      <li>각 옵션들은 자유자재로 합성해서 사용가능 ex) ls-lrt : 파일의 상세정보 + 오래된 것 부터 표시.</li>
    </ul>
  </li>
</ul>

<h2 id="2-cdchange-directory">2. cd(change directory)</h2>

<ul>
  <li>
    <p>cd는 경로를 이동할 떄 사용하는 명령어.</p>
  </li>
  <li>cd~ : 어느 곳에서든지 홈디렉토리로 바로 이동합니다.</li>
  <li>cd..: 상위 디렉토리로 이동합니다.</li>
  <li>cd/dir : 절대경로 dir로 이동할 경우 사용합니다.</li>
  <li>cd - : 이동하기 바로전의 디렉토리로 이동합니다.</li>
</ul>

<h2 id="3-touch">3. touch</h2>

<ul>
  <li>
    <p>touch 는 파일의 용량이 0인 파일을 생성, 날짜 변경하는 명령어.</p>
  </li>
  <li>touch filename : filename 의 파일을 생성합니다.</li>
  <li>touch -c filename : filename 의 시간을 현재시간으로 변경합니다.</li>
  <li>touch -t 202204181350 : filename 의 시간을 날짜정보(YYYYMMDDHHMM) 로 변경합니다.</li>
  <li>touch -r filename1 filename2 : filename2 의 날짜정보를 filename1 의 날짜정보와 같게 변경합니다.</li>
</ul>

<h2 id="4mkdirmake-directory">4.mkdir(make directory)</h2>

<ul>
  <li>
    <p>mkdir 은 새로운 디렉토리를 만들 때 사용하는 명령어입니다.</p>
  </li>
  <li>mkdir dirname : dirname 의 디렉토리를 생성합니다.</li>
  <li>mkidr -p dirname/subdname : 존재하지 않는 디렉토리의 하위 디렉토리까지 생성합니다.</li>
  <li>
    <p>mk -m 644 dirname : 특정 퍼미션을 갖는 디렉토리를 생성합니다.</p>

    <ul>
      <li><a href="">퍼미션</a></li>
    </ul>
  </li>
</ul>]]></content><author><name>GitHub User</name></author><category term="cmd" /><category term="cmd" /><summary type="html"><![CDATA[linux 명령어]]></summary></entry><entry><title type="html">퍼미션</title><link href="http://localhost:4000/cmd/2022/04/18/permisson.html" rel="alternate" type="text/html" title="퍼미션" /><published>2022-04-18T00:00:00+09:00</published><updated>2022-04-18T00:00:00+09:00</updated><id>http://localhost:4000/cmd/2022/04/18/permisson</id><content type="html" xml:base="http://localhost:4000/cmd/2022/04/18/permisson.html"><![CDATA[<h2 id="퍼미션이란">퍼미션이란</h2>

<ul>
  <li>
    <p>퍼미션 : 리눅스 보안 상의 이유로 다른 사용자들이 자신의 파일을 읽거나 쓰는 것을 제어할 수 있다. 이러한 역할을 하는것을 퍼미션이라고 한다. = 디렉토리 접근에 허가 권한 부여</p>

    <ul>
      <li>
        <p>총 10개의 문자로 표현하며, 맨앞 파일 형식을 제외한 9개의 문자로 파일 퍼미션을 나타낸다.</p>
      </li>
      <li>d : 디렉토리 , - :표준 파일</li>
      <li>r : 읽기 숫자 4</li>
      <li>w : 쓰기 숫자 2</li>
      <li>
        <p>x : 실행 숫자 1</p>
      </li>
      <li>파일구분 :  -/d/l</li>
      <li>소유자 : rw- (앞 3개)</li>
      <li>그룹 : rw- (중간 3개)</li>
      <li>이외사용자 : r– (뒤 3개)</li>
      <li>ex) 퍼미션
        <ul>
          <li>drw-r-r– : 644  디렉토리 소유자는 읽고 쓰기, 그룹에게는 읽기, 그 외 사용자는 읽기 까지만 허용.</li>
          <li>drwx——: 700  디렉토리 소유자만 읽고,쓰고,실행 허용.</li>
          <li>-rw-rw-rw-: 666  소유자, 그룹, 그외 사용자 모두 읽고 쓰기만 허용.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>chmod : 퍼미션을 바꾸기 위해 쓰는 명령어  chmod 퍼미션(숫자값) 해당 파일  로 변경</p>
    <ul>
      <li>chmod u(유저)+x+g(그룹)+x+o(이외)+w+z 해당파일 같은 방식으로도 가능</li>
    </ul>
  </li>
</ul>]]></content><author><name>GitHub User</name></author><category term="cmd" /><category term="cmd" /><summary type="html"><![CDATA[퍼미션이란]]></summary></entry><entry><title type="html">fetch API 데이터 정제</title><link href="http://localhost:4000/http/json/2022/04/14/fetch.html" rel="alternate" type="text/html" title="fetch API 데이터 정제" /><published>2022-04-14T00:00:00+09:00</published><updated>2022-04-14T00:00:00+09:00</updated><id>http://localhost:4000/http/json/2022/04/14/fetch</id><content type="html" xml:base="http://localhost:4000/http/json/2022/04/14/fetch.html"><![CDATA[<h2 id="fetch-api">Fetch API</h2>

<p>Fetch API 를 이용하면 Request 나 Resoponse 같은 HTTP 파이프라인을 구성하는 요소를 조작하는것이 가능하다.</p>

<p>fetch() (en-US) 메서드를 이용하여 비동기 네트워크 통신을 알기쉽게 기술할 수 있다.</p>

<p>fetch() 의 기본 스펙은 JQuery.ajax() 와 기본적으로 두가지가 다르다.</p>

<ol>
  <li>
    <p>fetch() 로 부터 반환되는 Promise 객체는 HTTP error 상태를 reject 하지않는다 (HTTP 상태코드가 404 나 500이더라도 안한다) 대신 ok 상태가 false 인 resolve 가 반환되며 네트워크 장애나 요청이 완료되지 못한상태에는 reject가 반환된다.</p>
  </li>
  <li>
    <p>fetch는 쿠키를 보내거나 받지 않는다 사이트에서 사용자 세션을 유지 관리해야 하는 경우 인증되지 않은 요청이 발생한다. 쿠키를 전송하기 위해서는 자격증명(credentials) 옵션으 반드시 설정해야 한다.</p>
  </li>
</ol>

<p>기본적인 fetch 코드</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fetch('http://example.com/movies.json')
  .then(function(response) {
    return response.json();
  })
  .then(function(myJson) {
    console.log(JSON.stringify(myJson));
  });
  //네트워크에서 JSON 파일을 가져와서 콘솔에 인쇄하는 코드
</code></pre></div></div>

<p>간단한 fetch() 사용 흐름은 인수 한개(가져올 자원의 경로)를 가져오고 응답을 포함하는 약속(Response (en-US)개체)을 반환하는것 이것은 단순한 HTTP Response 이며, 실제 JSON이 아니다.</p>

<p>response 객체로부터 사진을 가져오기 위해서는 json() (en-US) 메서드를 사용할 필요가 있다.
body의 믹스인 으로 정의되어, Request 객체와  Response (en-US) 객체의 쌍방에 구현되어 있다.</p>

<h2 id="fetch-로-비동기-http-get-하기">fetch 로 비동기 HTTP GET 하기</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fetch('http://210.109.63.156:9000/sample02')
  .then(function(response) {
    return response.json();
  })
  .then(function(myJson){
</code></pre></div></div>

<p><a href="http://210.109.63.156:9000/sample02">http://210.109.63.156:9000/sample02</a></p>

<p>위 샘플 HTTP 의 JSON을 GET 해와서 myJson으로 변수 선언후 초기화하였다.</p>

<h3 id="json-데이터-가공하기">Json 데이터 가공하기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"recordsFiltered":0,"data":[{"d_name":"시간별 전력 사용량","create_date":"8일 10 : 00","value":24.77},{"d_name":"시간별 전력 사용량","create_date":"8일 10 : 30","value":34.72},{"d_name":"시간별 전력 사용량","create_date":"8일 11 : 00","value":52.22},{"d_name":"시간별 전력 사용량","create_date":"8일 11 : 30","value":53.69},{"d_name":"시간별 전력 사용량","create_date":"8일 12 : 00","value":39.18},{"d_name":"시간별 전력 사용량","create_date":"8일 12 : 30","value":23.14},{"d_name":"시간별 전력 사용량","create_date":"8일 13 : 00","value":22.97},{"d_name":"시간별 전력 사용량","create_date":"8일 13 : 30","value":13.08}],"result_cd":"200","result_data":[{"d_name":"시간별 전력 사용량","create_date":"8일 10 : 00","value":24.77},{"d_name":"시간별 전력 사용량","create_date":"8일 10 : 30","value":34.72},{"d_name":"시간별 전력 사용량","create_date":"8일 11 : 00","value":52.22},{"d_name":"시간별 전력 사용량","create_date":"8일 11 : 30","value":53.69},{"d_name":"시간별 전력 사용량","create_date":"8일 12 : 00","value":39.18},{"d_name":"시간별 전력 사용량","create_date":"8일 12 : 30","value":23.14},{"d_name":"시간별 전력 사용량","create_date":"8일 13 : 00","value":22.97},{"d_name":"시간별 전력 사용량","create_date":"8일 13 : 30","value":13.08}],"draw":1,"recordsTotal":0}
</code></pre></div></div>

<p>샘플 HTTP 에 담긴 데이터를 원하는 정보와 형식으로 가공하려고 한다.</p>

<p>샘플 HTTP 의 type을 typeof 로 확인 한 결과 [object object] 타입으로 나왔다.</p>

<p>object 형태의 데이터에 각각 recodesFitered, data, result_cd, draw, recordsTotal 의 key 가 있으며, 각 key들 또한 [object object], number 형태의 vlaue를 담고 있는 것을 알 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fetch('http://210.109.63.156:9000/sample02')
  .then(function(response) {
    return response.json();
  })
  .then(function(myJson){

length = myJson.data.length;
B=[];
A=[];
for(i=0; i&lt;length; i++){
    B.push(myJson.data[i].value);
    A.push(myJson.data[i].create_date);
}
</code></pre></div></div>

<p>여기서 내가 필요로 하는 데이터는 “data” 라는 key 안에 있으므로 myjson.data 를 하여 myjson 의 “data” 키에 있는 value 들 만 불러오도록 한다.</p>

<p>data 안에 value 들 또한 object 이므로 각 object 안에서도 원하는 데이터가 있는 key 인 vlaue 와 create_date 만 뽑아 내도록 하였다.</p>

<p>myJson.data.length 를 하여 data key에 있는 value(object 형식으로 된) 의 갯수를 확인.</p>

<p>A 와 B 의 배열을 선언 초기화 해주고 for 문을 통해 각 object(“data”의 value) 안의 value(“data”의 value  인 object 안의 key 명) 와 create_data  라는 이름을 가진 key의 데이터를 각각 A와 B 배열 안에 push 해주어 저장해주었다.</p>

<ul>
  <li>배열.push = 배열의 마지막 자리에 데이터를 넣어줌.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A =[8일 10 : 00,8일 10 : 30,8일 11 : 00,8일 11 : 30,8일 12 : 00,8일 12 : 30,8일 13 : 00,8일 13 : 30];

B =[24.77,34.72,52.22,53.69,39.18,23.14,22.97,13.08];
</code></pre></div></div>
<p>위와 같이 json 에서 필요한 데이터를 A, B 배열로 가공하여 차트에 활용할 수 있게 되었다.</p>]]></content><author><name>GitHub User</name></author><category term="HTTP" /><category term="JSON" /><category term="HTTP" /><category term="JSON" /><summary type="html"><![CDATA[Fetch API]]></summary></entry><entry><title type="html">HTTP API 동기/비동기</title><link href="http://localhost:4000/http/api/2022/04/14/API.html" rel="alternate" type="text/html" title="HTTP API 동기/비동기" /><published>2022-04-14T00:00:00+09:00</published><updated>2022-04-14T00:00:00+09:00</updated><id>http://localhost:4000/http/api/2022/04/14/API</id><content type="html" xml:base="http://localhost:4000/http/api/2022/04/14/API.html"><![CDATA[<h2 id="http">HTTP</h2>

<p>두 컴퓨터 간에 텍스트 데이터를 주고 받는 길</p>

<p>요청: 작성 게시물 텍스트 데이터를 HTTP를 통해 back-end 컴퓨터로 보내고 back-end 컴퓨터에게
이 데이터를 데이터 베이스에 저장해달라고 요청한다.</p>

<p>응답: 요청을 받은 back-end 컴퓨터가 성공, 실패 등 처리 결과를 응답한다 back-end 컴퓨터는 응답할 떄,
응답 상태코드를 보낸다.</p>

<p>응답 상태코드</p>

<p>100 ~ 599 = 까지의 숫자로 구성</p>

<p>200 = 성공</p>

<p>400 front-end = 에러</p>

<p>500 back-end  = 에러</p>

<h2 id="api">API</h2>

<p>API 란 HTTP 요청을 back-end 컴퓨터에 보냈을 떄 실행되는 back-end 기능이다.
데이터 요청을 받고 응답을 주는 담당자.</p>

<h2 id="api-종류">API 종류</h2>

<p>네이버에서 1번 게시글을 조회 할 때.</p>

<p>rest- API = 주소처럼 생긴 이름 ex) http://naver.com/board/1</p>

<p>graphql-API = 일반 함수와 같은 이름 ex) board(1)</p>

<h2 id="rest-api">rest-API</h2>

<p>응답 결과로 back-end 개발자가 만든 함수에서 보내주는 모든 데이터를 받아야한다.</p>

<p>rest-API 에 요청하는 요청담당자: axios</p>

<h2 id="graphql-api">graphql-API</h2>

<p>응답 결과로 back-end 개발자가 만든 함수에서 필요한 데이터만 골라받을 수 있다.</p>

<p>필요한 데이터만 골라 받을 수 있어서, 효율적인 통신을 할 수 있다.</p>

<p>graphql-API 에 요청하는 요청 담당자: apollo-client</p>

<p>요청담당자: front-end 에서 설치하는 라이브러리</p>

<h2 id="api를-구분하는-4가지-방식">API를 구분하는 4가지 방식</h2>

<ol>
  <li>새로운 것을 생성하는 API -&gt; create</li>
  <li>기존 것을 조회하는 API  -&gt; read</li>
  <li>기존 것을 수정하는 API  -&gt; update</li>
  <li>기존 것을 삭제하는 API  -&gt; delete</li>
</ol>

<h3 id="생성create">생성(create)</h3>

<p>axios(rest-API) = post</p>

<p>apollo-client(graphql-API) = mutation</p>

<h3 id="수정update">수정(update)</h3>

<p>axios(rest-API) = put</p>

<p>apollo-client(graphql-API) = mutation</p>

<h3 id="삭제delete">삭제(delete)</h3>

<p>axios(rest-API) = delete</p>

<p>apollo-client(graphql-API) = mutation</p>

<h3 id="조회read">조회(read)</h3>

<p>axios(rest-API) = get</p>

<p>apollo-client(graphql-API) = query</p>

<h4 id="rest-api-1">rest-API</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import axios from "axios"

const result = axios.post(API name) // create

const result = axios.get(https://naver.com/board1) // read

const result = axios.put(https://naver.com/board1) // update

const result = axios.delete(https://naver.com/board1) // delete
</code></pre></div></div>

<p>back-end 에서 주는대로 front-end에서 다 받아온다.</p>

<h4 id="graphql-api-1">graphql-API</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import { useMutaion , useQuery } form '@apollo/client'

const result = useMutaion(API name)

const result = useQuery(API name)
</code></pre></div></div>

<p>back-end에서 골라서 front-end 에서 받는다.</p>

<h2 id="api-명세서">API 명세서</h2>

<p>back-end 개발자 에게 받는 API 사용 설명서</p>

<h2 id="api-요청-결과-타입json">API 요청 결과 타입(JSON)</h2>

<p>자바스크립트 객체 표기법 JSON(JavaScript Object Notation)</p>

<p>API 요청의 결과가 자바스크립트의 객체처럼 표기되어 JSON이라 부른다.</p>

<h2 id="동기비동기">동기/비동기</h2>

<p>서버와 데이터를 주고 받는 2가지 방식</p>

<h3 id="동기">동기</h3>

<p>서버 컴퓨터가 작업이 끝날 때까지 기다리는 통신</p>

<p>한번에 하나씩 통신</p>

<p>응답이 모두 끝난 후 요청</p>

<h3 id="비동기">비동기</h3>

<p>서버 컴퓨터가 작업이 끝날 떄까지 기다리지 않는 통신</p>

<p>서버에 요청(등록,수정,삭제 등) 저장이 될 때까지 기다리지 않고 다른 작업 진행</p>

<p>동시에 여러개 통신</p>

<p>오래 걸리는 일(이메일 전송, 다운로드 받으면서 메신저하기)</p>

<h2 id="비동기를-동기로-바꿔주는-명령어-async-await">비동기를 동기로 바꿔주는 명령어 async/ await</h2>

<p>rest_API  또는 graphql-API를 사용해서 요청에 대한 응답을 받는 객체(JSON)를 변수에 담아서 사용한다.</p>

<p>응답결과를 변수에 담아서 사용하려면 통신이 완료될 떄까지 기다려야한다.</p>

<p>이 때 async/await를 활용하여 기다려야한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//비동기 통신
async function 함수(){
    axios('API nmae') //서버 컴퓨터 요청(기다리지 않음)
}

//동기 통신
async function 함수(){
    await axios('API name') // 서버 컴퓨터에 요청(기다림)
}
</code></pre></div></div>

<h3 id="promise">Promise</h3>

<p>자바스크리트 비동기 처리에 사용되는 객체</p>

<p>API가 실행되면 서버에다가 요청을 보내는데 받아오기도 전에 화면에 데이터를 표시하려 하면 오류가 
발생하거나 빈화면이 뜸</p>

<p>Promise는 비동기적으로 실행하는 작업의 결과를 나타내는 객체이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//비동기 통신

async funciton 함수(){
    const data = axios.get('https://adadjson.com/posts/1')

    cosnlole.log(data)

    //Promise

}

//동기 통신

async funcion 함수(){

    const data = await axio.get('https://adadjson.com/posts/1')

    cosnlole.log(data)

    //{id:1}

}
</code></pre></div></div>]]></content><author><name>GitHub User</name></author><category term="HTTP" /><category term="API" /><category term="HTTP" /><category term="API" /><summary type="html"><![CDATA[HTTP]]></summary></entry><entry><title type="html">node.js 와 npm</title><link href="http://localhost:4000/node.js/2022/04/13/node.html" rel="alternate" type="text/html" title="node.js 와 npm" /><published>2022-04-13T00:00:00+09:00</published><updated>2022-04-13T00:00:00+09:00</updated><id>http://localhost:4000/node.js/2022/04/13/node</id><content type="html" xml:base="http://localhost:4000/node.js/2022/04/13/node.html"><![CDATA[<h2 id="nodejs-와-npm">node.js 와 npm</h2>

<p>node.js 와 npm 에 대하여 간단히 정리</p>

<h2 id="1-nodejs">1. node.js</h2>

<p>node.js = 자바스크립트 엔진으로 빌드된 자바스크립트 런타임.</p>

<p>node.js 는 자바스크립트를 서버로서 이용할 때 쓰인다.</p>

<p>자바스크립트는 브라우저에 종속된 언어이고 이를 밖을 꺼내는데 node.js가 사용된다.</p>

<p>node.js 는 비동기식으로 처리되며, 백엔드에서 쓰인다.</p>

<p>실시간으로 작동되어야하는 프로젝트에 쓰기좋다.</p>

<p>node.js Express를 사용하여 서버를 만들 수 있다.</p>

<h2 id="2-npm">2. npm</h2>

<p>node packge manger 의 줄임말로 node.js 설치시 자동으로 설치가 된다.</p>

<p>node.js 에 필요한 패키지들을 관리한다.</p>

<p>npm 명령어를 통하여 필요한 모듈을 다운로드 가능하다.</p>

<h2 id="3-nodejs-를-이용한-서버-생성">3. node.js 를 이용한 서버 생성</h2>

<p>node.js 서버를 개설할 폴더를 생성</p>

<p>폴더에 index.html 파일을 생성</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init 
</code></pre></div></div>

<p>폴더 경로에 위의 명령어를 입력하고 전부 엔터로 넘기면(default 값으로 설정) pakage.json 파일이 생성된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install lite-server
</code></pre></div></div>

<p>위의 명령어를 입력하면 lite-server 가 node_modules 디렉토리에 설치된다</p>

<p>lite-server 는 node.js 기반 경량 웹 서버이며, html 또는 js 의 변경을 감지하고 socket 을 이용하여 css 변경을 주입하는 기능을 제공한다.</p>

<p>package.json 파일에 dependencies 가 추가되며 lite-server 의 의존성이 추가된 걸 확인 할 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"start": "npm run lite"
"lite": "lite-server"
</code></pre></div></div>

<p>scripts 속성에 start 속성에 대한 정보를 입력하여 npm 구동시 실행할 명령어를 입력한다.</p>

<p>npm 실행시 자동으로 lite-server 가 구동되면서 index.html 이 웹브라우져에 로딩된다.</p>]]></content><author><name>GitHub User</name></author><category term="node.js" /><category term="node.js" /><summary type="html"><![CDATA[node.js 와 npm]]></summary></entry><entry><title type="html">echart 를 이용해서 js차트 만들기</title><link href="http://localhost:4000/echart/2022/04/13/echart.html" rel="alternate" type="text/html" title="echart 를 이용해서 js차트 만들기" /><published>2022-04-13T00:00:00+09:00</published><updated>2022-04-13T00:00:00+09:00</updated><id>http://localhost:4000/echart/2022/04/13/echart</id><content type="html" xml:base="http://localhost:4000/echart/2022/04/13/echart.html"><![CDATA[<h2 id="echart">Echart</h2>
<h2 id="1-echart-다운로드-하기">1. echart 다운로드 하기</h2>

<p>Echart 홈페이지: <a href="https://echarts.apache.org/en/index.html">https://echarts.apache.org/en/index.html</a></p>

<p>오픈 API 자바스크립트 차트를 만들 수 있게해준다.</p>

<p>여러 방법으로 인스톨 할 수 있으나, CDN 방식을 사용해 Echart를 사용해 보겠다.</p>

<p>Echart CDN:<a href="https://www.jsdelivr.com/package/npm/echarts">https://www.jsdelivr.com/package/npm/echarts</a></p>

<p>위 페이지로 들어가 echart CDN 파일을 HTML 형식으로 카피해온다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script src="https://cdn.jsdelivr.net/npm/echarts@5.3.2/dist/echarts.min.js"&gt;&lt;/script&gt;
</code></pre></div></div>

<p>프로젝트를 시작할 html 파일에 카피한 코드를 붙여넣으면 Echart 인스톨 완료</p>

<h2 id="2-echart-그리기">2. echart 그리기</h2>

<p>echart 구성</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
&lt;head&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/echarts@5.3.2/dist/echarts.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
....
&lt;div id="echart_id" style="width: 100%; height: 300px;"&gt;&lt;/div&gt;
</code></pre></div></div>
<p>head에 echart CDN을 인스톨 해주고 body에 echart 가 구현 될 div 컨테이너를 적는다.</p>

<p>id 는 차트의 id가 되는 부분이며 구성된 차트를 불러오는 역할을 한다.</p>

<p>style 의 width 와 height 는 각 각 구현될 차트의 넓이와 높이를 의미하며 % 혹은 px로 그 범위를 정해준다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script type="text/javascript"&gt;
// Initialize the echarts instance based on the prepared dom
var myChart = echarts.init(document.getElementById('echart_id'));
</code></pre></div></div>

<p>echart는 자바스크립트에서 구현되는 차트이기 때문에 스크립트 안쪽에 echart 구성 요소들을 적는다.</p>

<p>mychart 변수를 선언해주고 echarts.init 하여 echart의 인스턴스들을 준비된 dom에 초기화 시켜준다.</p>

<p>이후 차트가 앞서 지정해준 echart_id에 나타날 수 있도록 document.getElemntById(‘echart_id’) 해주면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      // Specify the configuration items and data for the chart
      var option = {
        title: {
          text: 'ECharts Getting Started Example'
        },
        tooltip: {},
        legend: {
          data: ['sales']
        },
        xAxis: {
          data: ['Shirts', 'Cardigans', 'Chiffons', 'Pants', 'Heels', 'Socks']
        },
        yAxis: {},
        series: [
          {
            name: 'sales',
            type: 'bar',
            data: [5, 20, 36, 10, 10, 20]
          }
        ]
      };

      // Display the chart using the configuration items and data just specified.
      myChart.setOption(option);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>이후 option 변수에 차트 구성 요소들을 적어내면 된다.</p>

<p>title 차트 머리에 붙는 차트 제목이다 top , left, right, botton 등의 추가 요소로 위치 조정이 가능하다.</p>

<p>tooltip 은 차트위에 커서가 있을 때 차트에 동적 반응을 준다 디폴트 요소는 item 이며 axis 등의 다양한 반응 요소를 줄 수 있다.</p>

<p>legend 는 차트의 주 구성 요소인 series 의 소제목 같은 역할을 하며 클릭으로 지정한 series를 끄거나 켤 수 도 있다 data[] 괄호안에
series 명을 넣어주어야 legend 요소가 차트에 나타난다.</p>

<p>xAxis 는 말 그대로 차트의 x축 이며, x축의 범위, 이름, 단위 등의 요소를 결정 할 수 있다.</p>

<p>yAxis y축의 범위,이름,단위등의 요소를 결정 할 수 있다.</p>

<p>series 는 차트의 타입, 갯수,데이터 등을 표현하는 곳 이다 object 형식으로 되어있으며 중괄호가 차트 하나를 구성한다.</p>

<p>차트 안에 name = 차트명 type = 차트 모양(bar,line,pie) data = 차트가 가지는 데이터 등을 설정할 수있다.</p>

<p>중괄호를 여러개 두어 여러 차트들을 한번에 만들수도 있다.</p>

<p>myChart 변수에 myChart.setOtpion(option) 을 해주면 차트가 지정된 위치에 구현된다.</p>]]></content><author><name>GitHub User</name></author><category term="echart" /><category term="echart" /><category term="css" /><summary type="html"><![CDATA[Echart 1. echart 다운로드 하기]]></summary></entry><entry><title type="html">git 블로그 만들기</title><link href="http://localhost:4000/jekyll/ruby/git/2022/04/08/gitblog.html" rel="alternate" type="text/html" title="git 블로그 만들기" /><published>2022-04-08T00:00:00+09:00</published><updated>2022-04-08T00:00:00+09:00</updated><id>http://localhost:4000/jekyll/ruby/git/2022/04/08/gitblog</id><content type="html" xml:base="http://localhost:4000/jekyll/ruby/git/2022/04/08/gitblog.html"><![CDATA[<h2 id="macos-용-jekyll-블로그-생성-방법">macOS 용 jekyll 블로그 생성 방법</h2>

<h3 id="1-home-brew-설치하기">1 HOME brew 설치하기.</h3>

<p>macOS 패키지 관리자 Homebrew 를 설치한다.</p>

<p>homebrew url: <a href="https://brew.sh/index_ko">https://brew.sh/index_ko</a></p>

<h3 id="2-ruby-설치하기">2 ruby 설치하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  brew install rbenv  
</code></pre></div></div>
<p>ruby build 를 설치한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  rbenv init 
</code></pre></div></div>
<p>rbenv 가 연동되도록 설정</p>

<p>설치 상태 검사</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
</code></pre></div></div>
<p>이후 터미널을 재시작</p>

<p>rbenv 로 ruby 최신버전을 설치 (등록일 기준 3.1.1 이 최신버전)</p>

<p>터미널에서 차례로</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  rbenv install 3.1.1

  rbenv global 3.1.1
</code></pre></div></div>
<p>실행하기</p>

<p>루비 버전확인</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ruby -v 
</code></pre></div></div>
<p>실행시 루비 버전이 최신이면 완료.</p>

<h3 id="3-jekyll-설치">3 jekyll 설치.</h3>

<p>jekyll 을 설치한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install --user-install bunder jekyll
</code></pre></div></div>

<p>쉘 환경을 추가한다 x.x 에는 설치된 루비의 버전 앞 2자리를 넣는다</p>

<p>루비 버전은 ruby -v 실행하면 알 수 있다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>" echo 'export PATH="HOME/.gem/ruby/X.X.0/bin:PATH"' &gt;&gt; ~/.bash_profile "
</code></pre></div></div>

<p>루비 경로가 홈 디렉토리를 가르키고 있는지 확인한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby env
</code></pre></div></div>
<p>홈 디렉토리를 가르키고 있다면 완료.</p>

<h3 id="4-jekyll-테마-사용하기">4 jekyll 테마 사용하기</h3>

<p>jekyll theme 에서 원하는 테마를 다운로드 하여 git 경로로 지정할 디렉토리에 넣는다.</p>

<p>지킬 테마 url: <a href="http://jekyllthemes.org/">http://jekyllthemes.org/</a></p>

<p>jekyll theme 폴더 경로로 들어가</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle init
</code></pre></div></div>
<p>Gemfile 을 생성해준다</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install webrick
</code></pre></div></div>

<p>서버가 실행 될 수 있게 해준다</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve 
</code></pre></div></div>

<p>실행</p>

<p>localhost:4000 에서 선택한 테마가 잘 작동하는지 확인</p>

<h3 id="5-git-준비">5 git 준비</h3>

<p>깃 허브에 새 레파지토리를 만들어준다</p>

<p>바로 블로그 페이지로 이동하게 하기 위해 레파지토리 명을</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(git아이디).github.io 
</code></pre></div></div>

<p>로 지정해둔다</p>

<p>공개하고 싶으면 public 비공개시 private 설정</p>

<p>생성시 새 레파지토리의 주소 url 이 생성된다.</p>

<h3 id="6-git-과-연결하기">6 git 과 연결하기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll theme 폴더 안의 _config.yml 파일에 destination: ../폴더이름/ 를 지정해줌 &lt;&lt; git 과 연결해줄 폴더
</code></pre></div></div>

<p>jekyll theme 의 부모 폴더 안 내가 지정해준 폴더 생성 확인</p>

<p>생성 폴더 경로로 이동</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init  
</code></pre></div></div>
<p>.git 폴더가 생성  연동준비 완료</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add (이름) (git 레파지토리 주소)  
</code></pre></div></div>
<p>이름은 마음대로 해도 되나 보통은 origin을 사용</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote -v 
</code></pre></div></div>
<p>리모트 이름과 경로 확인</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add (파일이름/경로) 
</code></pre></div></div>
<p>원하는 파일을 추가 가능</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add . 
</code></pre></div></div>
<p>실행하여 모든 파일을 추가할수도 있다 git status 로 add 상태 확인이 가능하다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit  
</code></pre></div></div>
<p>add한 파일들이 모두 commit 된다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push (remote이름) 
</code></pre></div></div>
<p>commit된 파일들이 모두 github에 저장된다.</p>]]></content><author><name>GitHub User</name></author><category term="jekyll" /><category term="ruby" /><category term="git" /><category term="jekyll" /><category term="ruby" /><category term="git" /><summary type="html"><![CDATA[macOS 용 jekyll 블로그 생성 방법]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/2018/12/07/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-12-07T00:00:00+09:00</published><updated>2018-12-07T00:00:00+09:00</updated><id>http://localhost:4000/jekyll/2018/12/07/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/2018/12/07/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<h2 id="section-1">section 1</h2>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<h2 id="section-2">section 2</h2>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<p>$ a * b = c ^ b $</p>

<p>$ 2^{\frac{n-1}{3}} $</p>

<p>$ \int_a^b f(x)\,dx. $</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// prints 'Hi, Tom' to STDOUT.</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

<span class="n">p1</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">"John"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Jeffrey</name></author><category term="jekyll" /><category term="jekyll" /><category term="theme" /><category term="yat" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">An exhibit of Markdown</title><link href="http://localhost:4000/markdown/2018/12/05/an-exhibit-of-markdown.html" rel="alternate" type="text/html" title="An exhibit of Markdown" /><published>2018-12-05T00:00:00+09:00</published><updated>2018-12-05T00:00:00+09:00</updated><id>http://localhost:4000/markdown/2018/12/05/an-exhibit-of-markdown</id><content type="html" xml:base="http://localhost:4000/markdown/2018/12/05/an-exhibit-of-markdown.html"><![CDATA[<p>This note demonstrates some of what <a href="http://daringfireball.net/projects/markdown/">Markdown</a> is capable of doing.</p>

<h2 id="an-exhibit-of-markdown">An exhibit of Markdown</h2>

<h1 id="h1-헤더">H1 헤더</h1>

<h2 id="h2-헤더">H2 헤더</h2>
<h3 id="h3-헤더">H3 헤더</h3>
<h4 id="h4-헤더">H4 헤더</h4>
<h5 id="h5-헤더">H5 헤더</h5>
<h6 id="h6-헤더">H6 헤더</h6>

<p><em>Note: Feel free to play with this page. Unlike regular notes, this doesn’t automatically save itself.</em></p>

<h2 id="basic-formatting">Basic formatting</h2>

<p>Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</p>

<p>Paragraphs must be separated by a blank line. Basic formatting of <em>italics</em> and <strong>bold</strong> is supported. This <em>can be <strong>nested</strong> like</em> so.</p>

<h2 id="lists">Lists</h2>

<h3 id="ordered-list">Ordered list</h3>

<ol>
  <li>Item 1</li>
  <li>A second item</li>
  <li>Number 3</li>
  <li>Ⅳ</li>
</ol>

<p><em>Note: the fourth item uses the Unicode character for <a href="http://www.fileformat.info/info/unicode/char/2163/index.htm">Roman numeral four</a>.</em></p>

<h3 id="unordered-list">Unordered list</h3>

<ul>
  <li>An item</li>
  <li>Another item</li>
  <li>Yet another item</li>
  <li>And there’s more…</li>
</ul>

<h2 id="paragraph-modifiers">Paragraph modifiers</h2>

<h3 id="code-block">Code block</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Code blocks are very useful for developers and other people who look at code or other things that are written in plain text. As you can see, it uses a fixed-width font.
</code></pre></div></div>

<p>You can also make <code class="language-plaintext highlighter-rouge">inline code</code> to add code into other things.</p>

<h3 id="quote">Quote</h3>

<blockquote>
  <p>Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.</p>
</blockquote>

<h2 id="headings">Headings</h2>

<p>There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character.</p>

<h3 id="headings-can-also-contain-formatting">Headings <em>can</em> also contain <strong>formatting</strong></h3>

<h3 id="they-can-even-contain-inline-code">They can even contain <code class="language-plaintext highlighter-rouge">inline code</code></h3>

<p>Of course, demonstrating what headings look like messes up the structure of the page.</p>

<p>I don’t recommend using more than three or four levels of headings here, because, when you’re smallest heading isn’t too small, and you’re largest heading isn’t too big, and you want each size up to look noticeably larger and more important, there there are only so many sizes that you can use.</p>

<h2 id="urls">URLs</h2>

<p>URLs can be made in a handful of ways:</p>

<ul>
  <li>A named link to <a href="http://www.markitdown.net/">MarkItDown</a>. The easiest way to do these is to select what you want to make a link and hit <code class="language-plaintext highlighter-rouge">Ctrl+L</code>.</li>
  <li>Another named link to <a href="http://www.markitdown.net/">MarkItDown</a></li>
  <li>Sometimes you just want a URL like <a href="http://www.markitdown.net/">http://www.markitdown.net/</a>.</li>
</ul>

<h2 id="horizontal-rule">Horizontal rule</h2>

<p>A horizontal rule is a line that goes across the middle of the page.</p>

<hr />

<p>It’s sometimes handy for breaking things up.</p>

<h2 id="images">Images</h2>

<p>Markdown can also contain images. I’ll need to add something here sometime.</p>

<h2 id="finally">Finally</h2>

<p>There’s actually a lot more to Markdown than this. See the official <a href="http://daringfireball.net/projects/markdown/basics">introduction</a> and <a href="http://daringfireball.net/projects/markdown/syntax">syntax</a> for more information. However, be aware that this is not using the official implementation, and this might work subtly differently in some of the little things.</p>]]></content><author><name>GitHub User</name></author><category term="markdown" /><category term="example" /><category term="markdown" /><summary type="html"><![CDATA[This note demonstrates some of what Markdown is capable of doing.]]></summary></entry><entry><title type="html">Mathjax Test</title><link href="http://localhost:4000/markdown/2018/05/26/mathjax-test.html" rel="alternate" type="text/html" title="Mathjax Test" /><published>2018-05-26T00:00:00+09:00</published><updated>2018-05-26T00:00:00+09:00</updated><id>http://localhost:4000/markdown/2018/05/26/mathjax-test</id><content type="html" xml:base="http://localhost:4000/markdown/2018/05/26/mathjax-test.html"><![CDATA[<ul>
  <li>A safe integer is an integer that
    <ul>
      <li>can be exactly represented as an IEEE-754 double precision number, and</li>
      <li>whose IEEE-75 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation</li>
    </ul>
  </li>
  <li>For example, $ 2 ^ {53} - 1 $ is a safe integer,
    <ul>
      <li>it can be exactly represented</li>
    </ul>
  </li>
</ul>]]></content><author><name>GitHub User</name></author><category term="markdown" /><category term="test" /><summary type="html"><![CDATA[A safe integer is an integer that can be exactly represented as an IEEE-754 double precision number, and whose IEEE-75 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation For example, $ 2 ^ {53} - 1 $ is a safe integer, it can be exactly represented]]></summary></entry></feed>